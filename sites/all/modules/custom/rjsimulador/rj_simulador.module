<?php

/**
 * Implementation of hook_permission().
 */
function rj_simulador_permission() {
  return array(
    'crear partidas' => array(
      'title' => t('Crear nuevas partidas'),
      'description' => t('Permite a los usuarios con este permiso almacenar los datos de una partida'),
    ),
    'ver info partidas' => array(
      'title' => t('Ver tus estadísticas del Simulador'),
      'description' => t('Permite a los usuarios con este permiso ver sus estadísticas de partida'),
    ),
    'comparar info partidas' => array(
      'title' => t('Acceder a toda la información del Simulador'),
      'description' => t('Permite a los usuarios con este permiso ver toda la información de todos los usuarios'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function rj_simulador_menu() {
  $items = array();
  $items['simulaciones'] = array(
    'title' => 'Mis datos de las simulaciones',
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_simulaciones_page',
    'access callback' => 'check_user_access_has_saved_partidas',
    'access arguments' => array('ver info partidas'),
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['simulaciones/%/partidas'] = array(
    'title' => 'Partidas de la Simulación @n_simulacion',
    'title arguments' => array('@n_simulacion' => 1),
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_partidas_simulacion_page',
    'page arguments' => array(1),
    'access arguments' => array('ver info partidas'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['simulaciones/%/partidas/%'] = array(
    'title' => 'Datos de la Partida',
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_partida_page',
    'page arguments' => array(3),
    'access callback' => 'check_user_access_to_partida',
    'access arguments' => array('ver info partidas', 3, 1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/simulaciones_usuarios'] = array(
    'title' => 'Datos generales de las simulaciones',
    'file' => 'rj_simulador.admin.inc',
    'page callback' => 'rj_simulador_simulaciones_usuarios_admin_page',
    'access arguments' => array('comparar info partidas'),
    'menu_name' => 'management',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/simulaciones_usuarios/%/simulaciones'] = array(
    'title' => 'Usuario con UID @uid: Datos de las simulaciones',
    'title arguments' => array('@uid' => 2),
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_simulaciones_page',
    'page arguments' => array(2, TRUE),
    'access arguments' => array('comparar info partidas'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/simulaciones_usuarios/%/simulaciones/%/partidas'] = array(
    'title' => 'Usuario con UID @uid: Partidas de la Simulación @n_simulacion',
    'title arguments' => array('@uid' => 2, '@n_simulacion' => 4),
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_partidas_simulacion_page',
    'page arguments' => array(4, 2, TRUE),
    'access arguments' => array('comparar info partidas'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/simulaciones_usuarios/%/simulaciones/%/partidas/%'] = array(
    'title' => 'Usuario @uid: Datos de la Partida',
    'title arguments' => array('@uid' => 2),
    'file' => 'rj_simulador.pages.inc',
    'page callback' => 'rj_simulador_partida_page',
    'page arguments' => array(6, 2),
    'access callback' => 'check_user_access_to_partida',
    'access arguments' => array('comparar info partidas', 6, 4, 2),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function check_user_access_has_saved_partidas($permission, $uid = NULL) {
  if (isset($uid)) {
    $usuario = user_uid_optional_load($uid);
  }
  else {
    $usuario = user_uid_optional_load();
  }

  $provider = FactoryDataProvider::createDataProvider();
  $usuarios = $provider->loadAllSimulatorUsers();

  // Solo pueden ver la pantalla genérica de simulación los usuarios que tienen partidas guardadas
  return user_access($permission) && array_key_exists($usuario->uid, $usuarios);
}

function check_user_access_to_partida($permission, $id_partida, $id_simulacion, $uid = NULL) {
  // Si estamos en modo admin también se comprueba que el uid y el id_partida coincidan.
  if (isset($uid)) {
    $usuario = user_uid_optional_load($uid);
  }
  else {
    $usuario = user_uid_optional_load();
  }
  $partida = Partida::loadById($id_partida);
  // Comprobamos si el usuario que accede tiene permisos, si la partida coincide con la simulación de la URL
  // y si la partida a la que accede la creó él usuario.
  return user_access($permission) && $partida->getIdSimulacion() == $id_simulacion && $usuario->uid == $partida->getUid();
}

/**
 *  Implements hook_services_resources().
 */
function rj_simulador_services_resources() {
  // Include resources definitions
  module_load_include('inc', 'rj_simulador', 'resources/rj_simulador_partida.resource');
  $resources = array();
  $resources += partida_resource_definition();
  return $resources;
}

function rj_simulador_theme() {
  return array(
    'lista_simulaciones_partidas' => array(
      'template' => 'templates/lista-simulaciones-partidas',
      'variables' => array(
        'upper_left' => NULL,
        'upper_right' => NULL,
        'main_content' => NULL
      )
    ),
    'partida' => array(
      'template' => 'templates/partida',
      'variables' => array(
        'upper_content' => NULL,
        'upper_left' => NULL,
        'upper_right' => NULL,
        'main_content' => NULL
      )
    )
  );
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function rj_simulador_preprocess_lista_simulaciones(&$variables) {
}

/**
 *  Implements hook_services_resources_alter().
 */
function rj_simulador_services_resources_alter(&$resources, &$endpoint) {
  dpm($resources);
  $resources['user']['actions']['register']['callback'] = "_user_register_custom";
}

/**
 * @param $account
 * @return array
 * @throws ServicesException
 */
function _user_register_custom($account) {
  // Adds backwards compatability with regression fixed in #1083242
  $account = _services_arg_value($account, 'account');

  // Load the required includes for saving profile information
  // with drupal_form_submit().
  module_load_include('inc', 'user', 'user.pages');

  // Register a new user.
  $form_state['values'] = $account;

  // Determine the password(s). Passwords may not be available as this callback
  // is used for registration as well.
  $pass1 = '';
  $pass2 = '';
  if (isset($account['pass'])) {
    // For legacy usage, passwords come in as a single string. To match the
    // actual form state value keys used by Drupal, we also can collect two
    // passwords via an array.
    if (is_array($account['pass'])) {
      $pass1 = $account['pass']['pass1'];
      $pass2 = $account['pass']['pass2'];
    }
    else {
      $pass1 = $account['pass'];
      $pass2 = $account['pass'];
    }
  }
  $form_state['values']['pass'] = array(
    'pass1' => $pass1,
    'pass2' => $pass2
  );

  // Set the form state op.
  $form_state['values']['op'] = variable_get('services_user_create_button_resource_create', t('Create new account'));

  // Execute the register form.
  $form_state['programmed_bypass_access_check'] = FALSE;

  // Ensure this is validated, as drupal_form_submit will not call validation.
  user_register_validate(drupal_get_form('user_register_form'), $form_state);
  $errors = form_get_errors();
  // If there are errors, then short circuit and return early.
  if ($errors) {
    return services_error(implode(' ', $errors), 406, array('form_errors' => $errors));
  }

  drupal_form_submit('user_register_form', $form_state);
  // find and store the new user into the form_state
  if(isset($form_state['values']['uid'])) {
    $form_state['user'] = user_load($form_state['values']['uid']);
  }

  // Error if needed.
  if ($errors = form_get_errors()) {
    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
  }
  else {
    $user = array('uid' => $form_state['user']->uid);
    if ($uri = services_resource_uri(array('user', $user['uid']))) {
      $user['uri'] = $uri;
    }
    _user_resource_update_services_user($user['uid'], time());
    return $user;
  }
}